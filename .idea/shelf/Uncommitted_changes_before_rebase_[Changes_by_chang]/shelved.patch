Index: regression/finance_regression.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#!/usr/bin/python\r\n\r\n\"\"\"\r\n    Starter code for the regression mini-project.\r\n    \r\n    Loads up/formats a modified version of the dataset\r\n    (why modified?  we've removed some trouble points\r\n    that you'll find yourself in the outliers mini-project).\r\n\r\n    Draws a little scatterplot of the training/testing data\r\n\r\n    You fill in the regression code where indicated:\r\n\"\"\"    \r\n\r\n\r\nimport sys\r\nimport pickle\r\nsys.path.append(\"../tools/\")\r\nfrom feature_format import featureFormat, targetFeatureSplit\r\ndictionary = pickle.load( open(\"../final_project/final_project_dataset_modified.pkl\", \"r\") )\r\n\r\n### list the features you want to look at--first item in the \r\n### list will be the \"target\" feature\r\nfeatures_list = [\"bonus\", \"salary\"]\r\ndata = featureFormat( dictionary, features_list, remove_any_zeroes=True)\r\ntarget, features = targetFeatureSplit( data )\r\n\r\n### training-testing split needed in regression, just like classification\r\nfrom sklearn.cross_validation import train_test_split\r\nfeature_train, feature_test, target_train, target_test = train_test_split(features, target, test_size=0.5, random_state=42)\r\ntrain_color = \"b\"\r\ntest_color = \"b\"\r\n\r\n\r\n\r\n### Your regression goes here!\r\n### Please name it reg, so that the plotting code below picks it up and \r\n### plots it correctly. Don't forget to change the test_color above from \"b\" to\r\n### \"r\" to differentiate training points from test points.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### draw the scatterplot, with color-coded training and testing points\r\nimport matplotlib.pyplot as plt\r\nfor feature, target in zip(feature_test, target_test):\r\n    plt.scatter( feature, target, color=test_color ) \r\nfor feature, target in zip(feature_train, target_train):\r\n    plt.scatter( feature, target, color=train_color ) \r\n\r\n### labels for the legend\r\nplt.scatter(feature_test[0], target_test[0], color=test_color, label=\"test\")\r\nplt.scatter(feature_test[0], target_test[0], color=train_color, label=\"train\")\r\n\r\n\r\n\r\n### draw the regression line, once it's coded\r\ntry:\r\n    plt.plot( feature_test, reg.predict(feature_test) )\r\n    reg.fit(feature_test, target_test)\r\n    print(\"feature_test slope: {}\".format(reg.coef_))\r\n    plt.plot(feature_train, reg.predict(feature_train), color=\"r\")\r\nexcept NameError:\r\n    pass\r\nplt.xlabel(features_list[1])\r\nplt.ylabel(features_list[0])\r\nplt.legend()\r\nplt.show()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/regression/finance_regression.py b/regression/finance_regression.py
--- a/regression/finance_regression.py	(revision 0e0f1a2dc9cb2da2a52ddb2f5f896ab268688e46)
+++ b/regression/finance_regression.py	(date 1628178995518)
@@ -38,7 +38,13 @@
 ### plots it correctly. Don't forget to change the test_color above from "b" to
 ### "r" to differentiate training points from test points.
 
-
+from sklearn import linear_model
+reg=linear_model.LinearRegression()
+reg.fit(feature_train,target_train)
+print(reg.coef_)
+print(reg.intercept_)
+print(reg.score(feature_train,target_train))
+print(reg.score(feature_test,target_test))
 
 
 
